require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.	If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.	There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.	Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TeamsController do

	# This should return the minimal set of attributes required to create a valid
	# Team. As you add validations to Team, be sure to
	# update the return value of this method accordingly.
	before(:each) do
		@compo = FactoryGirl.create(:compo)
	end
	def valid_attributes
		{:name => "teamname", :compo_id => @compo.id}
	end

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# TeamsController. Be sure to keep this updated too.
	def valid_session
		{}
	end

	describe "unauthorised access" do
		it_should_require_login_for_actions :index, :destroy, :show, :new, :update, :create, :join
	end

	describe "authorised access" do
		before(:each) do
			login
		end
		describe "GET index" do
			it "assigns all teams as @teams" do
				team = Team.create! valid_attributes
				get :index, {}
				assigns(:teams).should eq([team])
			end
		end

		describe "GET show" do
			it "assigns the requested team as @team" do
				team = Team.create! valid_attributes
				get :show, {:id => team.to_param}
				assigns(:team).should eq(team)
			end
		end

		describe "GET new" do
			it "assigns a new team as @team" do
				get :new, {}
				assigns(:team).should be_a_new(Team)
			end
		end

		describe "GET edit" do
			it "assigns the requested team as @team" do
				team = Team.create! valid_attributes
				get :edit, {:id => team.to_param}
				assigns(:team).should eq(team)
			end
		end

		describe "POST create" do
			describe "with valid params" do
				it "creates a new Team" do
					expect {
						post :create, {:team => valid_attributes}
					}.to change(Team, :count).by(1)
				end

				it "assigns a newly created team as @team" do
					post :create, {:team => valid_attributes}
					assigns(:team).should be_a(Team)
					assigns(:team).should be_persisted
				end

				it "redirects to the created team" do
					post :create, {:team => valid_attributes}
					response.should redirect_to(Team.last)
				end
			end

			describe "with invalid params" do
				it "assigns a newly created but unsaved team as @team" do
					# Trigger the behavior that occurs when invalid params are submitted
					Team.any_instance.stub(:save).and_return(false)
					post :create, {:team => {}}
					assigns(:team).should be_a_new(Team)
				end

				it "re-renders the 'new' template" do
					# Trigger the behavior that occurs when invalid params are submitted
					Team.any_instance.stub(:save).and_return(false)
					post :create, {:team => {}}
					response.should render_template("new")
				end
			end
		end

		describe "PUT join" do
			it "adds current user to the team" do
				team = Team.create! valid_attributes
				put :join, {:id => team.id, :team => {}}
				@current_user.teams.should include(team)
				team.users.should include(@current_user)
				
			end
			it "rejects users that are already in the team" do
				team = FactoryGirl.create(:team)
				put :join, {:id => team.id, :team => {}}
				put :join, {:id => team.id, :team => {}}
				team.users.count.should == 1
			end
			it "rejects users if the team exceeds maxumum capacity" do
				team = FactoryGirl.create(:team)
				user = FactoryGirl.create(:user)
				team.compo.group_size =0 
				team.save!
				session[:user_id] = user.id
				put :join, {:id => team.id}
				session[:user_id] = @current_user.id
				put :join, {:id => team.id}
				team.users.should_not include(@current_user)
			end
		end
		describe "PUT update" do
			describe "with valid params" do
				it "updates the requested team" do
					team = Team.create! valid_attributes
					# Assuming there are no other teams in the database, this
					# specifies that the Team created on the previous line
					# receives the :update_attributes message with whatever params are
					# submitted in the request.
					Team.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
					put :update, {:id => team.to_param, :team => {'these' => 'params'}}
				end

				it "assigns the requested team as @team" do
					team = Team.create! valid_attributes
					put :update, {:id => team.to_param, :team => valid_attributes}
					assigns(:team).should eq(team)
				end

				it "redirects to the team" do
					team = Team.create! valid_attributes
					put :update, {:id => team.to_param, :team => valid_attributes}
					response.should redirect_to(team)
				end
			end

			describe "with invalid params" do
				it "assigns the team as @team" do
					team = Team.create! valid_attributes
					# Trigger the behavior that occurs when invalid params are submitted
					Team.any_instance.stub(:save).and_return(false)
					put :update, {:id => team.to_param, :team => {}}
					assigns(:team).should eq(team)
				end

				it "re-renders the 'edit' template" do
					team = Team.create! valid_attributes
					# Trigger the behavior that occurs when invalid params are submitted
					Team.any_instance.stub(:save).and_return(false)
					put :update, {:id => team.to_param, :team => {}, :a => 1}
					response.should render_template("edit")
				end
			end
		end

		describe "DELETE destroy" do
			it "destroys the requested team" do
				team = Team.create! valid_attributes
				expect {
					delete :destroy, {:id => team.to_param}
				}.to change(Team, :count).by(-1)
			end

			it "redirects to the teams list" do
				team = Team.create! valid_attributes
				delete :destroy, {:id => team.to_param}
				response.should redirect_to(teams_url)
			end
		end
	end
end
