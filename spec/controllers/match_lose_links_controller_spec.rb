require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MatchLoseLinksController do

  # This should return the minimal set of attributes required to create a valid
  # MatchLoseLink. As you add validations to MatchLoseLink, be sure to
  # update the return value of this method accordingly.
  before(:each) do
    @match = FactoryGirl.create(:match)
    @next_match = FactoryGirl.create(:match)
  end
  def valid_attributes
    {:match_id => @match.id, :next_match_id => @next_match.id}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MatchLoseLinksController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "unauthorised access" do
    it_should_require_login_for_actions :index, :destroy, :show, :new, :update, :create
  end

  describe "authorised access" do
    before(:each) do
      login
    end
    describe "GET index" do
      it "assigns all match_lose_links as @match_lose_links" do
        match_lose_link = MatchLoseLink.create! valid_attributes
        get :index, {}
        assigns(:match_lose_links).should eq([match_lose_link])
      end
    end

    describe "GET show" do
      it "assigns the requested match_lose_link as @match_lose_link" do
        match_lose_link = MatchLoseLink.create! valid_attributes
        get :show, {:id => match_lose_link.to_param}
        assigns(:match_lose_link).should eq(match_lose_link)
      end
    end

    describe "GET new" do
      it "assigns a new match_lose_link as @match_lose_link" do
        get :new, {}
        assigns(:match_lose_link).should be_a_new(MatchLoseLink)
      end
    end

    describe "GET edit" do
      it "assigns the requested match_lose_link as @match_lose_link" do
        match_lose_link = MatchLoseLink.create! valid_attributes
        get :edit, {:id => match_lose_link.to_param}
        assigns(:match_lose_link).should eq(match_lose_link)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new MatchLoseLink" do
          expect {
            post :create, {:match_lose_link => valid_attributes}
          }.to change(MatchLoseLink, :count).by(1)
        end

        it "assigns a newly created match_lose_link as @match_lose_link" do
          post :create, {:match_lose_link => valid_attributes}
          assigns(:match_lose_link).should be_a(MatchLoseLink)
          assigns(:match_lose_link).should be_persisted
        end

        it "redirects to the created match_lose_link" do
          post :create, {:match_lose_link => valid_attributes}
          response.should redirect_to(MatchLoseLink.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved match_lose_link as @match_lose_link" do
          # Trigger the behavior that occurs when invalid params are submitted
          MatchLoseLink.any_instance.stub(:save).and_return(false)
          post :create, {:match_lose_link => {}}
          assigns(:match_lose_link).should be_a_new(MatchLoseLink)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          MatchLoseLink.any_instance.stub(:save).and_return(false)
          post :create, {:match_lose_link => {}}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested match_lose_link" do
          match_lose_link = MatchLoseLink.create! valid_attributes
          # Assuming there are no other match_lose_links in the database, this
          # specifies that the MatchLoseLink created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          MatchLoseLink.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => match_lose_link.to_param, :match_lose_link => {'these' => 'params'}}
        end

        it "assigns the requested match_lose_link as @match_lose_link" do
          match_lose_link = MatchLoseLink.create! valid_attributes
          put :update, {:id => match_lose_link.to_param, :match_lose_link => valid_attributes}
          assigns(:match_lose_link).should eq(match_lose_link)
        end

        it "redirects to the match_lose_link" do
          match_lose_link = MatchLoseLink.create! valid_attributes
          put :update, {:id => match_lose_link.to_param, :match_lose_link => valid_attributes}
          response.should redirect_to(match_lose_link)
        end
      end

      describe "with invalid params" do
        it "assigns the match_lose_link as @match_lose_link" do
          match_lose_link = MatchLoseLink.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          MatchLoseLink.any_instance.stub(:save).and_return(false)
          put :update, {:id => match_lose_link.to_param, :match_lose_link => {}}
          assigns(:match_lose_link).should eq(match_lose_link)
        end

        it "re-renders the 'edit' template" do
          match_lose_link = MatchLoseLink.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          MatchLoseLink.any_instance.stub(:save).and_return(false)
          put :update, {:id => match_lose_link.to_param, :match_lose_link => {}}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested match_lose_link" do
        match_lose_link = MatchLoseLink.create! valid_attributes
        expect {
          delete :destroy, {:id => match_lose_link.to_param}
        }.to change(MatchLoseLink, :count).by(-1)
      end

      it "redirects to the match_lose_links list" do
        match_lose_link = MatchLoseLink.create! valid_attributes
        delete :destroy, {:id => match_lose_link.to_param}
        response.should redirect_to(match_lose_links_url)
      end
    end
  end
end
