require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.	If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.	There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.	Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StoreItemsController do

	# This should return the minimal set of attributes required to create a valid
	# StoreItem. As you add validations to StoreItem, be sure to
	# update the return value of this method accordingly.
	def valid_attributes
		{:name => "store_itemname", :purchase_price => 12 }
	end

	describe "unauthorised access" do
		it_should_require_login_for_actions :index, :destroy, :show, :new, :update, :create
	end

	describe "authorised access" do
		before(:each) do
			login
		end
		describe "GET index" do
			it "assigns all store_items as @store_items" do
				store_item = StoreItem.create! valid_attributes
				get :index
				assigns(:store_items).should eq([store_item])
			end
		end

		describe "GET show" do
			it "assigns the requested store_item as @store_item" do
				store_item = StoreItem.create! valid_attributes
				get :show, :id => store_item.id.to_s
				assigns(:store_item).should eq(store_item)
			end
		end

		describe "GET new" do
			it "assigns a new store_item as @store_item" do
				get :new
				assigns(:store_item).should be_a_new(StoreItem)
			end
		end

		describe "GET edit" do
			it "assigns the requested store_item as @store_item" do
				store_item = StoreItem.create! valid_attributes
				get :edit, :id => store_item.id.to_s
				assigns(:store_item).should eq(store_item)
			end
		end

		describe "POST create" do
			describe "with valid params" do
				it "creates a new StoreItem" do
					expect {
						post :create, :store_item => valid_attributes
					}.to change(StoreItem, :count).by(1)
				end

				it "assigns a newly created store_item as @store_item" do
					post :create, :store_item => valid_attributes
					assigns(:store_item).should be_a(StoreItem)
					assigns(:store_item).should be_persisted
				end

				it "redirects to the created store_item" do
					post :create, :store_item => valid_attributes
					response.should redirect_to(StoreItem.last)
				end
			end

			describe "with invalid params" do
				it "assigns a newly created but unsaved store_item as @store_item" do
					# Trigger the behavior that occurs when invalid params are submitted
					StoreItem.any_instance.stub(:save).and_return(false)
					post :create, :store_item => {}
					assigns(:store_item).should be_a_new(StoreItem)
				end

				it "re-renders the 'new' template" do
					# Trigger the behavior that occurs when invalid params are submitted
					StoreItem.any_instance.stub(:save).and_return(false)
					post :create, :store_item => {}
					response.should render_template("new")
				end
			end
		end

		describe "PUT update" do
			describe "with valid params" do
				it "updates the requested store_item" do
					store_item = StoreItem.create! valid_attributes
					# Assuming there are no other store_items in the database, this
					# specifies that the StoreItem created on the previous line
					# receives the :update_attributes message with whatever params are
					# submitted in the request.
					StoreItem.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
					put :update, :id => store_item.id, :store_item => {'these' => 'params'}
				end

				it "assigns the requested store_item as @store_item" do
					store_item = StoreItem.create! valid_attributes
					put :update, :id => store_item.id, :store_item => valid_attributes
					assigns(:store_item).should eq(store_item)
				end

				it "redirects to the store_item" do
					store_item = StoreItem.create! valid_attributes
					put :update, :id => store_item.id, :store_item => valid_attributes
					response.should redirect_to(store_item)
				end
			end

			describe "with invalid params" do
				it "assigns the store_item as @store_item" do
					store_item = StoreItem.create! valid_attributes
					# Trigger the behavior that occurs when invalid params are submitted
					StoreItem.any_instance.stub(:save).and_return(false)
					put :update, :id => store_item.id.to_s, :store_item => {}
					assigns(:store_item).should eq(store_item)
				end

				it "re-renders the 'edit' template" do
					store_item = StoreItem.create! valid_attributes
					# Trigger the behavior that occurs when invalid params are submitted
					StoreItem.any_instance.stub(:save).and_return(false)
					put :update, :id => store_item.id.to_s, :store_item => {}
					response.should render_template("edit")
				end
			end
		end

		describe "DELETE destroy" do
			it "destroys the requested store_item" do
				store_item = StoreItem.create! valid_attributes
				expect {
					delete :destroy, :id => store_item.id.to_s
				}.to change(StoreItem, :count).by(-1)
			end

			it "redirects to the store_items list" do
				store_item = StoreItem.create! valid_attributes
				delete :destroy, :id => store_item.id.to_s
				response.should redirect_to(store_items_url)
			end
		end
	end
end
